{"version":3,"sources":["images/githubicon.png","components/GithubCard.js","components/UserSearch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GithubCard","Card","Fragment","Image","alt","src","this","props","avatar","wrapped","ui","Content","Header","name","Description","bio","extra","Icon","followers","Component","UserSearch","state","query","user","results","active","useractive","handleSearchSelection","event","selection","console","log","fetch","then","response","json","data","setState","handleSearchChange","search","value","length","getInfo","items","className","placeholder","autoFocus","ref","input","onChange","_","debounce","leading","avatar_url","SearchSuggestions","map","r","key","id","onClick","login","App","handleToggle","ghicon","style","width","Button","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b38188f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/githubicon.b15eedbd.png\";","import React, { Component } from 'react';\nimport {Card, Icon, Image} from 'semantic-ui-react';\n\nclass GithubCard extends Component {\n  render(){\n    return (\n      <>\n      <Card>\n            <React.Fragment>\n              <Image alt =\"\" src={this.props.avatar} wrapped ui={false} />\n            \n        <Card.Content>\n          <Card.Header>{this.props.name}</Card.Header>\n            <Card.Description>\n              {this.props.bio}\n            </Card.Description>\n        </Card.Content>\n\n        <Card.Content extra>\n            <Icon name='user' />\n            {this.props.followers} Followers\n          \n        </Card.Content>\n        </React.Fragment>\n        \n      </Card>\n      </>  \n      )\n  }\n}\n\nexport default GithubCard;","import _ from 'lodash'\nimport React, { Component } from 'react'\nimport './Usersearch.css'\nimport GithubCard from './GithubCard'\n\nclass UserSearch extends Component {\n  state = {\n      query:\"\",\n      user: {},\n      results: [],\n      active: false,\n      useractive: false, \n\n  }\n\n  handleSearchSelection = (event, selection) => {\n      console.log(selection)\n    fetch(`https://api.github.com/users/${selection}`)\n            .then(response=>response.json())\n            .then(data=>{\n                console.log(data)\n                this.setState({user: data, useractive: true})\n                console.log(this.state.user)\n            })\n\n}\n\n  handleSearchChange = () => {\n      this.setState({\n          query: this.search.value\n      }, () => {\n        if (this.state.query && this.state.query.length > 1) {\n          if (this.state.query.length % 2 === 0) {\n            this.getInfo()\n          }\n        } else if (!this.state.query) {\n        }\n      })\n    }\n\n    getInfo=()=>{\n        console.log(this.state.query)\n        fetch(`https://api.github.com/search/users?q=${this.state.query}`)\n            .then(response=>response.json())\n            .then(data=>{\n                console.log(data.items)\n                this.setState({results: data.items, active:true})\n            })\n    }\n\n    render(){\n    return (\n        <div className=\"mainDiv\" >\n            <div className=\"inputDiv\">\n                <section>\n                        <input\n                            placeholder=\"Search for...\"\n                            autoFocus\n                            ref={input=>this.search=input}\n                            onChange={_.debounce(this.handleSearchChange, 500,{leading: true})}\n                        />\n                        {this.state.active===true && (\n                        <SearchSuggestions results= {this.state.results} handleSearchSelection={this.handleSearchSelection}/>)}\n                </section>\n        </div>\n\n        {this.state.useractive === true && (\n        <div className=\"outputDiv\">\n\n          <GithubCard avatar={this.state.user.avatar_url} name={this.state.user.name} bio={this.state.user.bio} followers={this.state.user.followers}/>\n            \n           \n\n        </div>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default UserSearch\n\nclass SearchSuggestions extends Component{\n    render(){\n        return(\n        <ul>\n            {this.props.results.map(r=>(\n                <li key={r.id} >\n                <button key={r.id} onClick={event=>this.props.handleSearchSelection(event, r.login)}>{r.login}</button>\n            </li>\n            ))}\n        </ul>\n        )\n    }\n}\n\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport {Button} from 'semantic-ui-react';\nimport UserSearch from \"./components/UserSearch\"\nimport GithubCard from './components/GithubCard'\nimport ghicon from \"./images/githubicon.png\"\n\n\nclass App extends Component {\n  state={\n    user: {},\n    active: false,\n  }\n\n  handleToggle = () => {\n    console.log(\"button function called\")\n    if(this.state.active===true){\n      this.setState({active: false})\n    } else {\n      fetch(\"https://api.github.com/users/amandayonce\")\n      .then(response =>response.json())\n      .then(data => {\n        this.setState({user: data, active: true})\n      })\n    }\n  }\n\n  render(){\n    return (\n      <>\n      <img src={ghicon} alt=\"JS Icon\" className=\"img-fluid\" style={{ width:45 }}></img>\n      <h1>Github User Search</h1>\n      <h2>Start typing a name in the search box to find matching results</h2>\n      <h3>Then Select a name to display that user's Github Profile</h3>\n      <UserSearch/>\n      <br/>\n\n      <h1>Click Here to See My Personal Github Profile</h1>\n      <Button onClick={this.handleToggle}>Toggle User</Button>\n      {this.state.active === true && (\n          <GithubCard avatar={this.state.user.avatar_url} name={this.state.user.name} bio={this.state.user.bio} followers={this.state.user.followers}/>\n      )}\n      </>  \n      )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n    </BrowserRouter>,\n document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}